--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.18.1 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

export type DayPhase = ("Day" | "Night")
export type MoonPhase = ("NewMoon" | "WaxingCrescent" | "FirstQuarter" | "WaxingGibbous" | "FullMoon" | "WaningGibbous" | "ThirdQuarter" | "WaningCrescent")
export type DayNightData = { Phase: ("Day" | "Night"), Duration: number, TotalDuration: number, Moon: ("NewMoon" | "WaxingCrescent" | "FirstQuarter" | "WaxingGibbous" | "FullMoon" | "WaningGibbous" | "ThirdQuarter" | "WaningCrescent") }
export type EventData = { Name: string, StartTime: number, EndTime: number, Duration: number, Source: string }
export type EventPackage = {[number]: { Name: string, StartTime: number, EndTime: number, Duration: number, Source: string }}
local function WriteEVENT_DayNight(Value: { Phase: ("Day" | "Night"), Duration: number, TotalDuration: number, Moon: ("NewMoon" | "WaxingCrescent" | "FirstQuarter" | "WaxingGibbous" | "FullMoon" | "WaningGibbous" | "ThirdQuarter" | "WaningCrescent") }): ()
	-- Allocate BLOCK: 7 bytes
	local BLOCK_START = Allocate(7)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	if Value.Phase == "Day" then
		buffer.writeu8(SendBuffer, BLOCK_START + 1, 0)
	elseif Value.Phase == "Night" then
		buffer.writeu8(SendBuffer, BLOCK_START + 1, 1)
	else
		error(`Unexpected enum: {Value.Phase}, expected one of "Day" or "Night".`)
	end
	if Value.Duration > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 2, 0b0_11111_0000000000)
	elseif Value.Duration < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 2, 0b1_11111_0000000000)
	elseif Value.Duration ~= Value.Duration then
		buffer.writeu16(SendBuffer, BLOCK_START + 2, 0b1_11111_0000000001)
	elseif Value.Duration == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 2, 0)
	else
		local float = Value.Duration
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 2, Result)
	end
	if Value.TotalDuration > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 4, 0b0_11111_0000000000)
	elseif Value.TotalDuration < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 4, 0b1_11111_0000000000)
	elseif Value.TotalDuration ~= Value.TotalDuration then
		buffer.writeu16(SendBuffer, BLOCK_START + 4, 0b1_11111_0000000001)
	elseif Value.TotalDuration == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 4, 0)
	else
		local float = Value.TotalDuration
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 4, Result)
	end
	if Value.Moon == "NewMoon" then
		buffer.writeu8(SendBuffer, BLOCK_START + 6, 0)
	elseif Value.Moon == "WaxingCrescent" then
		buffer.writeu8(SendBuffer, BLOCK_START + 6, 1)
	elseif Value.Moon == "FirstQuarter" then
		buffer.writeu8(SendBuffer, BLOCK_START + 6, 2)
	elseif Value.Moon == "WaxingGibbous" then
		buffer.writeu8(SendBuffer, BLOCK_START + 6, 3)
	elseif Value.Moon == "FullMoon" then
		buffer.writeu8(SendBuffer, BLOCK_START + 6, 4)
	elseif Value.Moon == "WaningGibbous" then
		buffer.writeu8(SendBuffer, BLOCK_START + 6, 5)
	elseif Value.Moon == "ThirdQuarter" then
		buffer.writeu8(SendBuffer, BLOCK_START + 6, 6)
	elseif Value.Moon == "WaningCrescent" then
		buffer.writeu8(SendBuffer, BLOCK_START + 6, 7)
	else
		error(`Unexpected enum: {Value.Moon}, expected one of "NewMoon" or "WaxingCrescent" or "FirstQuarter" or "WaxingGibbous" or "FullMoon" or "WaningGibbous" or "ThirdQuarter" or "WaningCrescent".`)
	end
end

local function WriteEVENT_Event(Value: {[number]: { Name: string, StartTime: number, EndTime: number, Duration: number, Source: string }}): ()
	-- Allocate BLOCK: 3 bytes
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	local Elements_1 = 0
	for Key_1, Element_1 in Value do
		Elements_1 += 1
		local OFFSET_0 = Allocate(4)
		buffer.writeu32(SendBuffer, OFFSET_0, Key_1)
		local Length = #Element_1.Name
		local OFFSET_1 = Allocate(2)
		buffer.writeu16(SendBuffer, OFFSET_1, Length)
		Allocate(Length)
		buffer.writestring(SendBuffer, SendOffset, Element_1.Name, Length)
		local OFFSET_2 = Allocate(2)
		if Element_1.StartTime > 65504 then
			buffer.writeu16(SendBuffer, OFFSET_2, 0b0_11111_0000000000)
		elseif Element_1.StartTime < -65504 then
			buffer.writeu16(SendBuffer, OFFSET_2, 0b1_11111_0000000000)
		elseif Element_1.StartTime ~= Element_1.StartTime then
			buffer.writeu16(SendBuffer, OFFSET_2, 0b1_11111_0000000001)
		elseif Element_1.StartTime == 0 then
			buffer.writeu16(SendBuffer, OFFSET_2, 0)
		else
			local float = Element_1.StartTime
			local Abosulte = math.abs(float)
			local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
			local RoundedValue = (Abosulte // Interval) * Interval
			local Fraction, Exponent = math.frexp(RoundedValue)
			Exponent += 14
			local Mantissa = math.round(if Exponent <= 0
				then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
				else Fraction * 0x800) % 0x400
			local Result = Mantissa
				+ math.max(Exponent, 0) * 0x400
				+ if float < 0 then 0x8000 else 0
			buffer.writeu16(SendBuffer, OFFSET_2, Result)
		end
		local OFFSET_3 = Allocate(2)
		if Element_1.EndTime > 65504 then
			buffer.writeu16(SendBuffer, OFFSET_3, 0b0_11111_0000000000)
		elseif Element_1.EndTime < -65504 then
			buffer.writeu16(SendBuffer, OFFSET_3, 0b1_11111_0000000000)
		elseif Element_1.EndTime ~= Element_1.EndTime then
			buffer.writeu16(SendBuffer, OFFSET_3, 0b1_11111_0000000001)
		elseif Element_1.EndTime == 0 then
			buffer.writeu16(SendBuffer, OFFSET_3, 0)
		else
			local float = Element_1.EndTime
			local Abosulte = math.abs(float)
			local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
			local RoundedValue = (Abosulte // Interval) * Interval
			local Fraction, Exponent = math.frexp(RoundedValue)
			Exponent += 14
			local Mantissa = math.round(if Exponent <= 0
				then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
				else Fraction * 0x800) % 0x400
			local Result = Mantissa
				+ math.max(Exponent, 0) * 0x400
				+ if float < 0 then 0x8000 else 0
			buffer.writeu16(SendBuffer, OFFSET_3, Result)
		end
		local OFFSET_4 = Allocate(1)
		buffer.writeu8(SendBuffer, OFFSET_4, Element_1.Duration)
		local Length = #Element_1.Source
		local OFFSET_5 = Allocate(2)
		buffer.writeu16(SendBuffer, OFFSET_5, Length)
		Allocate(Length)
		buffer.writestring(SendBuffer, SendOffset, Element_1.Source, Length)
	end
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Elements_1)
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	DayNight = {
		Fire = NOOP,
		FireAll = NOOP,
		FireList = NOOP,
		FireExcept = NOOP
	},
	Event = {
		Fire = NOOP,
		FireAll = NOOP,
		FireList = NOOP,
		FireExcept = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsServer() then
    error("Server network module can only be required from the server.")
end

local Reliable: RemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
if not Reliable then
    local RemoteEvent = Instance.new("RemoteEvent")
    RemoteEvent.Name = BASE_EVENT_NAME .. "_RELIABLE_REMOTE"
    RemoteEvent.Parent = ReplicatedStorage
    Reliable = RemoteEvent
end

local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent
if not Unreliable then
    local UnreliableRemoteEvent = Instance.new("UnreliableRemoteEvent")
    UnreliableRemoteEvent.Name = BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE"
    UnreliableRemoteEvent.Parent = ReplicatedStorage
    Unreliable = UnreliableRemoteEvent
end

local PlayersMap: {[Player]: BufferSave} = {}

Players.PlayerRemoving:Connect(function(Player)
    PlayersMap[Player] = nil
end)

local function StepReplication()
    for Player, Send in PlayersMap do
        if Send.Cursor <= 0 then
            continue
        end

        local Buffer = buffer.create(Send.Cursor)
        buffer.copy(Buffer, 0, Send.Buffer, 0, Send.Cursor)
        Reliable:FireClient(Player, Buffer, Send.Instances)

        Send.Size = 64
        Send.Cursor = 0
        Send.Buffer = buffer.create(64)
        table.clear(Send.Instances)
    end
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)
Unreliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	DayNight = {
		Fire = function(Player: Player, Value: { Phase: ("Day" | "Night"), Duration: number, TotalDuration: number, Moon: ("NewMoon" | "WaxingCrescent" | "FirstQuarter" | "WaxingGibbous" | "FullMoon" | "WaningGibbous" | "ThirdQuarter" | "WaningCrescent") }): ()
			Load(PlayersMap[Player])
			WriteEVENT_DayNight(Value)
			PlayersMap[Player] = Save()
		end,
		FireAll = function(Value: { Phase: ("Day" | "Night"), Duration: number, TotalDuration: number, Moon: ("NewMoon" | "WaxingCrescent" | "FirstQuarter" | "WaxingGibbous" | "FullMoon" | "WaningGibbous" | "ThirdQuarter" | "WaningCrescent") }): ()
			Load()
			WriteEVENT_DayNight(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireList = function(List: {Player}, Value: { Phase: ("Day" | "Night"), Duration: number, TotalDuration: number, Moon: ("NewMoon" | "WaxingCrescent" | "FirstQuarter" | "WaxingGibbous" | "FullMoon" | "WaningGibbous" | "ThirdQuarter" | "WaningCrescent") }): ()
			Load()
			WriteEVENT_DayNight(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in List do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireExcept = function(Except: Player, Value: { Phase: ("Day" | "Night"), Duration: number, TotalDuration: number, Moon: ("NewMoon" | "WaxingCrescent" | "FirstQuarter" | "WaxingGibbous" | "FullMoon" | "WaningGibbous" | "ThirdQuarter" | "WaningCrescent") }): ()
			Load()
			WriteEVENT_DayNight(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
	},
	Event = {
		Fire = function(Player: Player, Value: {[number]: { Name: string, StartTime: number, EndTime: number, Duration: number, Source: string }}): ()
			Load(PlayersMap[Player])
			WriteEVENT_Event(Value)
			PlayersMap[Player] = Save()
		end,
		FireAll = function(Value: {[number]: { Name: string, StartTime: number, EndTime: number, Duration: number, Source: string }}): ()
			Load()
			WriteEVENT_Event(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireList = function(List: {Player}, Value: {[number]: { Name: string, StartTime: number, EndTime: number, Duration: number, Source: string }}): ()
			Load()
			WriteEVENT_Event(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in List do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireExcept = function(Except: Player, Value: {[number]: { Name: string, StartTime: number, EndTime: number, Duration: number, Source: string }}): ()
			Load()
			WriteEVENT_Event(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL